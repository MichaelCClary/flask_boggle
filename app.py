from boggle import Boggle
from flask import Flask, request, render_template, session, jsonify

app = Flask(__name__)
app.config['SECRET_KEY'] = "jinja"

boggle_game = Boggle()


@app.route('/')
def start_game():
    """Initialize game and variables for the session when you hit the root route

    Returns:
        Renders the game.html template
    """
    session['board'] = boggle_game.make_board()
    session['total_score'] = 0
    session['word_score'] = 0
    session['games_played'] = session.get('games_played', 0) + 1
    session['high_score'] = session.get('high_score', 0)
    session['words_used'] = []
    return render_template("game.html")


@app.route('/guess', methods=["POST"])
def check_guess():
    """Gets a word from user and checks it against board with validate_word method
    then calls calculate score to calculate word score, total score and high score
    Return to app.js to add to board
        [json]: ({
        "word": validated_word,
        "total_score": session['total_score'],
        "word_score": session['word_score'],
        "high_score": session['high_score'],
    })
    """
    word = request.form['word']

    validated_word = validate_word(word)
    calculate_score(word, validated_word)

    return jsonify({
        "word": validated_word,
        "total_score": session['total_score'],
        "word_score": session['word_score'],
        "high_score": session['high_score'],
    })


def calculate_score(word, phrase):
    """Calculated word score, total score for game and high score of user
    based on length of word and passes it into session storage if it is a valid word based on phrase

    Args:
        word (string): word as guess from user
        phrase (string): phrase generated by Boggle.check_valid_word class method
    """
    if phrase == "ok":
        session['total_score'] += len(word)
        session['word_score'] = len(word)
        if session['high_score'] < session['total_score']:
            session['high_score'] = session['total_score']


def validate_word(word):
    """checks to see if word has been guessed before and if not then calls method
    check_valid_word to see if word is on the gameboard

    Args:
        word (string): word guess from user

    Returns:
        string: already-guessed if word has been guessed before
                ok if valid word on board
                not-on-board if valid word thats not on the board
                not-word if not a word in the dictionary
    """
    if word in session['words_used']:
        return 'already-guessed'
    else:
        session['words_used'].append(word)
        return boggle_game.check_valid_word(session['board'], word)
